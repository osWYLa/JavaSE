传统方法带来的问题：
    不能对加入到集合中的元素的数据类型进行约束；
    遍历的时候需要进行类型转换，如果集合中的数据量较大，会对效率有影响；
使用泛型解决
    编译时检查元素类型
    减少类型转换次数
泛型：
    又称参数化类型，解决数据类型安全性问题；
    在类声明或者实例化时只要指定好需要的具体的类型即可；
    Java泛型可以保证如果程序在编译时没有发出警告那么运行时就不会产生ClassCastException 异常
    在类声明时通过一个标识标识类中某个属性的类型或者是某个方法的返回值及参数类型；
        普通成员可以使用泛型（属性和方法）；使用泛型的数组，不能初始化；静态方法中不能使用类的泛型；
        泛型的类型，在创建对象时确定（创建对象时需要指定类型），如果在创建对象时没有指定类型，默认为Object

泛型的语法；
    泛型的声明：
    interface List<T>{} 和 class GenTest<K,V>{}   （类和接口都可以使用）


    说明：
    1）其中，T，K，V不代表值，代表类型；只能是引用类型
    2）常使用T，type
    在类名后面指定类型参数的值（类型）：
        List<String> list = new ArrayList<String>();   <==> List<String> list = new ArrayList<>();
        //  编译器靠左边的来判断，左边是编译类型
        Iterator<Customer> iterator = customers.iterator();

        如果不指定泛型，默认Object
        List list = new ArrayList();  <==>  List<Object> list = new ArrayList<>();

泛型的继承和通配符
    1）泛型不支持继承性；
