多线程

    进程：1）进程指的是 运行中 的应用程序，每个进程都有自己独立的地址空间（内存空间）。
            用户每次点击一个程序，就启动了一个进程，操作系统会为该进程分配独立的地址空间。
            用户再次点击程序，又启动一个进程，操作系统会为新的进程分配独立的地址空间。
            目前操作系统都支持多进程。
         2）进程是程序的一次执行过程，或是正在运行的一个程序。
            动态过程：有它自身的产生、存在和消亡的过程；
         3）程序是静止的，进程是动态的
    线程：线程是进程中的一个实体，是被系统独立调度和分派的基本的基本单位，拥有再运行中心不可少的资源，但它可与同属一个进程的其他线程
         共享进程所拥有的全部资源。同一进程中的多个线程之间可以并发执行。

        单线程：同一个时刻，只允许执行一个线程；
        多线程；同一个时刻，可以执行多个线程；
        并发：同一时刻，多个任务交替执行。简单来说，单核CPU实现的多线程就是指并发；
        并行：同一时刻，多个任务同时执行。多核CPU可以实现并行。

    线程的状态：（有说是5个也说是6个）
        1）新建： 当一个Thread类或者其子类对象被声明并创建时，新生的线程处于新建状态；（实现Runnable接口的呢？是new Thread(实现接口)的时候？）
        2）就绪；当新建状态线程被start()后，进入线程队列等待CPU时间片，此时已具备运行的条件；
        3）运行：当就绪的线程被调度并获得处理器资源时，进入运行状态，run()方法定义了线程的操作和功能；（状态切换需要时间）
        4）阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CPU并临时中止自己的执行，进入阻塞状态；
        5）消亡：线程完成了全部工作，或者线程被强制性的停止；



    java线程的基本使用：
        创建线程的几种方式：
            1）继承Thread类，并重写run方法；
            2）实现Runnable接口，并重写run方法；(Java只支持单继承)
                继承Thread类VS继承Runnable接口:
                ①本质没有区别，Thread类本身也实现了Runnable接口
                ②实现Runnable接口方式更加适合多个线程共享一个资源的情况，且避免了单继承的限制。



        线程停止：
            1）当线程执行并结束之后会自动退出；
            2）可以使用 标志 来指示run方法退出的方式来停止线程，即通知方式（确保线程以安全的方式结束运行）[线程间通信]



